Given two strings s1 and s2, write a function to return true if s2 contains the permutation of s1. In other words, one of the first string's permutations is the substring of the second string.

 

Example 1:

Input: s1 = "ab" s2 = "eidbaooo"
Output: True
Explanation: s2 contains one permutation of s1 ("ba").
Example 2:

Input:s1= "ab" s2 = "eidboaoo"
Output: False
 

Constraints:

The input strings only contain lower case letters.
The length of both given strings is in range [1, 10,000].


class Solution {
public:
   Solution(){
    ios::sync_with_stdio(false);
	cin.tie(nullptr);
	cout.tie(nullptr);
	
}
bool checkInclusion(string p, string s) {
 	     int l1=s.length();
         int l2=p.length();
    
         vector<int> ans;
    if(l1==0 ||l1<l2)return false;
         vector<int> freq(26,0);
         for (int z=0;z<l2;z++)
            freq[p[z]-'a']++;
        int j,i=0;
        vector <int> new_(26,0);
        for( j=0;j<l2;j++){
            new_[s[j]-'a']++;
        }
    if(freq==new_)
            return true;
    j--;
    while(j<l1){
            new_[s[i]-'a']--;
            i++;
            j++;
        if(j<l1)
            new_[s[j]-'a']++;
        if(freq==new_)
            return true;
    }
            return false;   
}
};
