There are a total of numCourses courses you have to take, labeled from 0 to numCourses-1.

Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: [0,1]

Given the total number of courses and a list of prerequisite pairs, is it possible for you to finish all courses?

 

Example 1:

Input: numCourses = 2, prerequisites = [[1,0]]
Output: true
Explanation: There are a total of 2 courses to take. 
             To take course 1 you should have finished course 0. So it is possible.
Example 2:

Input: numCourses = 2, prerequisites = [[1,0],[0,1]]
Output: false
Explanation: There are a total of 2 courses to take. 
             To take course 1 you should have finished course 0, and to take course 0 you should
             also have finished course 1. So it is impossible.
 

Constraints:

The input prerequisites is a graph represented by a list of edges, not adjacency matrices. Read more about how a graph is represented.
You may assume that there are no duplicate edges in the input prerequisites.
1 <= numCourses <= 10^5


class Solution {
public:
    vector<vector<int>> g;
   
    bool dfsutil(int n,vector<int> &color){
        color[n]=1;
        for(int i=0;i<g[n].size();i++)
            if(color[g[n][i]]==1)
                return true;
            else if (color[g[n][i]]==0 && dfsutil(g[n][i],color))
                return true;
        color[n]=2;
        return false;
    }
    bool canFinish(int n, vector<vector<int>>& p) {
        g=vector<vector<int>>(n);
        vector<int> color(n,0);
        for (auto v : p)
            g[v[0]].push_back(v[1]);
        
        for(int i=0;i<n;i++)
            if(color[i]==0 && dfsutil(i,color))
                    return false;
        
        return true;
        
    }
};

static const auto _____ = []()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    return 0;
}();
