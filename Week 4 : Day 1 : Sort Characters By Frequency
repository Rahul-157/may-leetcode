Given a string, sort it in decreasing order based on the frequency of characters.

Example 1:

Input:
"tree"

Output:
"eert"

Explanation:
'e' appears twice while 'r' and 't' both appear once.
So 'e' must appear before both 'r' and 't'. Therefore "eetr" is also a valid answer.
Example 2:

Input:
"cccaaa"

Output:
"cccaaa"

Explanation:
Both 'c' and 'a' appear three times, so "aaaccc" is also a valid answer.
Note that "cacaca" is incorrect, as the same characters must be together.
Example 3:

Input:
"Aabb"

Output:
"bbAa"

Explanation:
"bbaA" is also a valid answer, but "Aabb" is incorrect.
Note that 'A' and 'a' are treated as two different characters.




// bool comp(pair<pair<int,int>,char> i, pair<pair<int,int>,char> j) 
 //    { 
 //        if(i.first.first!=j.first.first)
 //            return i.first.first > j.first.first;
 //        return i.first.second>j.first.second;            
 //    } 
class Solution {
public:   
    Solution(){
        std::ios::sync_with_stdio(false);
    std::cin.tie(NULL);
    std::cout.tie(0);
    }
    string frequencySort(string s) {
       int has[256]={0};
        vector<pair<int,int>> f;
        for (int i=0;i<s.length();i++)
            has[s[i]]++; 
        for(int i=0;i<256;i++)
            if(has[i])
                f.push_back({-has[i],i});
        sort(f.begin(),f.end());
        string ans="";
        for (auto i:f){
            // for(int j=0;j<-i.first;j++)
                ans+=string(-i.first,i.second);
        }
        return ans;
    }
};
