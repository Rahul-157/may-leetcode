Given a circular array C of integers represented by A, find the maximum possible sum of a non-empty subarray of C.

Here, a circular array means the end of the array connects to the beginning of the array.  (Formally, C[i] = A[i] when 0 <= i < A.length, and C[i+A.length] = C[i] when i >= 0.)

Also, a subarray may only include each element of the fixed buffer A at most once.  (Formally, for a subarray C[i], C[i+1], ..., C[j], there does not exist i <= k1, k2 <= j with k1 % A.length = k2 % A.length.)

 

Example 1:

Input: [1,-2,3,-2]
Output: 3
Explanation: Subarray [3] has maximum sum 3
Example 2:

Input: [5,-3,5]
Output: 10
Explanation: Subarray [5,5] has maximum sum 5 + 5 = 10
Example 3:

Input: [3,-1,2,-1]
Output: 4
Explanation: Subarray [2,-1,3] has maximum sum 2 + (-1) + 3 = 4
Example 4:

Input: [3,-2,2,-3]
Output: 3
Explanation: Subarray [3] and [3,-2,2] both have maximum sum 3
Example 5:

Input: [-2,-3,-1]
Output: -1
Explanation: Subarray [-1] has maximum sum -1
 

Note:

-30000 <= A[i] <= 30000
1 <= A.length <= 30000


static int __ = []() {
	std::ios::sync_with_stdio(false);
	std::cin.tie(nullptr);
	std::cout.tie(nullptr);
	return 0;
}();
class Solution {
public:
    int util1(vector<int> A){
        int l = A.size();
        long maxi=-1*1e9;
        long sum=0;
        for(int i=0;i<l;i++){
            sum+=A[i];
            if(sum<0)sum=0;
            if(maxi<sum)
                maxi=sum;
        }
        return maxi;
    }
    int util2(vector<int> A){
        int l = A.size();
        long mini=-1*1e9;
        long sum=0;
        long arrsum=0;
        for(int i=0;i<l;i++){
            arrsum +=A[i];
            sum+=-1*A[i];
            if(sum<0)sum=0;
            if(mini<sum)
                mini=sum;
        }
        return arrsum+mini;
    }
    int maxSubarraySumCircular(vector<int>& A) {
        int util1sum = util1(A);
        int util2sum = util2(A);
        int ans=max(util1sum,util2sum);
        if(ans==0)
        {
            ans = -1*1e9;
            for(int i=0;i<A.size();i++)
                if(ans<A[i])
                    ans=A[i];
        }
        return ans;
    }
};
