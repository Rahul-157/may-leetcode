Given a string s and a non-empty string p, find all the start indices of p's anagrams in s.

Strings consists of lowercase English letters only and the length of both strings s and p will not be larger than 20,100.

The order of output does not matter.

Example 1:

Input:
s: "cbaebabacd" p: "abc"

Output:
[0, 6]

Explanation:
The substring with start index = 0 is "cba", which is an anagram of "abc".
The substring with start index = 6 is "bac", which is an anagram of "abc".
Example 2:

Input:
s: "abab" p: "ab"

Output:
[0, 1, 2]

Explanation:
The substring with start index = 0 is "ab", which is an anagram of "ab".
The substring with start index = 1 is "ba", which is an anagram of "ab".
The substring with start index = 2 is "ab", which is an anagram of "ab".


class Solution {
public:
Solution(){
    ios::sync_with_stdio(false);
	cin.tie(nullptr);
	cout.tie(nullptr);
	
}
vector<int> findAnagrams(string s, string p) {
 	     int l1=s.length();
         int l2=p.length();
    
         vector<int> ans;
    if(l1==0 ||l1<l2)return ans;
         vector<int> freq(26,0);
         for (int z=0;z<l2;z++)
            freq[p[z]-'a']++;
        int j,i=0;
        vector <int> new_(26,0);
        for( j=0;j<l2;j++){
            new_[s[j]-'a']++;
        }
  
    if(freq==new_)
            ans.push_back(i);
    j--;
 
    while(j<l1){
            new_[s[i]-'a']--;
            i++;
            j++;
        if(j<l1)
            new_[s[j]-'a']++;
        if(freq==new_)
            ans.push_back(i);
    }
            return ans;   
}
};
