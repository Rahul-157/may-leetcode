In a binary tree, the root node is at depth 0, and children of each depth k node are at depth k+1.

Two nodes of a binary tree are cousins if they have the same depth, but have different parents.

We are given the root of a binary tree with unique values, and the values x and y of two different nodes in the tree.

Return true if and only if the nodes corresponding to the values x and y are cousins.

 

Example 1:


Input: root = [1,2,3,4], x = 4, y = 3
Output: false
Example 2:


Input: root = [1,2,3,null,4,null,5], x = 5, y = 4
Output: true
Example 3:



Input: root = [1,2,3,null,4], x = 2, y = 3
Output: false
 

Constraints:

The number of nodes in the tree will be between 2 and 100.
Each node has a unique integer value from 1 to 100.



/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isCousins(TreeNode* root, int x, int y) {
        int h1,h2;
        TreeNode *p1,*p2,*temp=root;
        queue<pair<TreeNode*,int> > q,q2;
        q.push(make_pair(temp,0));
        q2.push(make_pair(temp,0));
        while(!q.empty()){
            TreeNode *t= q.front().first;
            int h=q.front().second;
            q.pop();
            if(t->left && t->left->val==x){
                p1=t;
                h1=h+1;
            break;}
            
            if(t->right && t->right->val==x){
                p1=t;
                h1=h+1;
            break;}
            if(t->left)
                q.push(make_pair(t->left,h+1));
            if(t->right)
                q.push(make_pair(t->right,h+1));
        }
        while(!q2.empty()){
            TreeNode *t= q2.front().first;
            int h=q2.front().second;
            q2.pop();
            if(t->left && t->left->val==y){
                p2=t;
                h2=h+1;
            break;}
            
            if(t->right && t->right->val==y){
                p2=t;
                h2=h+1;
            break;}
            if(t->left)
                q2.push(make_pair(t->left,h+1));
            if(t->right)
                q2.push(make_pair(t->right,h+1));
        }
        if(!p1 || !p2)
            return false;
        if(p1!=p2 && h1==h2)
            return true;
        return false;
    }
};
