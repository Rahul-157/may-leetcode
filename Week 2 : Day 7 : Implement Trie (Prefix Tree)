Implement a trie with insert, search, and startsWith methods.

Example:

Trie trie = new Trie();

trie.insert("apple");
trie.search("apple");   // returns true
trie.search("app");     // returns false
trie.startsWith("app"); // returns true
trie.insert("app");   
trie.search("app");     // returns true
Note:

You may assume that all inputs are consist of lowercase letters a-z.
All inputs are guaranteed to be non-empty strings.




class Trie {
public:
    vector<Trie*> child;
    bool leaf;
    /** Initialize your data structure here. */
    Trie() {
        ios::sync_with_stdio(0);
        cin.tie(0);
        this->child = vector<Trie*>(26,nullptr);
        leaf=0;
    }
    
    /** Inserts a word into the trie. */
    void insert(string word) {
        Trie *temp=this;
        for(auto c:word){
            if(temp->child[c-'a']==nullptr)
                temp->child[c-'a']=new Trie();
            temp=temp->child[c-'a'];
        }
        temp->leaf=true;
    }
    
    /** Returns if the word is in the trie. */
    bool search(string word) {
        Trie *temp =this;
        for(auto c:word){
            if(temp->child[c-'a']==nullptr)
                return false;
            temp = temp->child[c-'a'];
        }
        return temp!=nullptr&&temp->leaf;
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    bool startsWith(string prefix) {
        Trie *temp =this;
        for(auto c:prefix){
            if(temp->child[c-'a']==nullptr)
                return false;
            else
                temp = temp->child[c-'a'];
        }
        return true;
    }
};

/**
 * Your Trie object will be instantiated and called as such:
 * Trie* obj = new Trie();
 * obj->insert(word);
 * bool param_2 = obj->search(word);
 * bool param_3 = obj->startsWith(prefix);
 */
